#!/bin/sh

# sets up .cargo/config.toml and kernel/build.rs based on the provided arch and platform

if [ "$#" -ne 2 ]; then
    echo "usage: $0 <arch> <platform>" 2>&1
    exit 1
fi

set -e

ARCH=$1
PLATFORM=$2

cat > .cargo/config.toml <<EOF
# do not edit this file! it's automatically generated by set-target.sh
# if you need to make any changes, edit config.toml.stub instead and re-run set-target.sh

build.target = "$ARCH-unknown-none.json"
build.rustflags = [ "--cfg", "target_arch=\"$ARCH\"", "--cfg", "target_platform=\"$PLATFORM\"" ]
EOF
cat .cargo/config.toml.stub >> .cargo/config.toml

cat > kernel/build.rs <<EOF
// do not edit this file! it's automatically generated by set-target.sh based on the contents of src/arch/<current arch>/build.rs, src/platform/<current platform>/build.rs, and build.rs.stub
// if you need to make any changes, edit the partial build scripts instead and re-run set-target.sh

fn main() {
    { /* ==== architecture-specific build steps ==== */
EOF
cat kernel/src/arch/$ARCH/build.rs.stub >> kernel/build.rs
cat >> kernel/build.rs <<EOF
    }
    { /* ==== platform-specific build steps ==== */
EOF
cat kernel/src/platform/$PLATFORM/build.rs.stub >> kernel/build.rs
cat >> kernel/build.rs <<EOF
    }
    { /* ==== other non-specific build steps ==== */
EOF
cat kernel/build.rs.stub >> kernel/build.rs
cat >> kernel/build.rs <<EOF
    }
}
EOF
